Destructuring Arrays
- a way of turning an array into individual variables
Ex: const arr = [2, 3, 4]
const [x, y, z] = arr; // returns 2 3 4
- doesnt affect the original array in any way
- can take only part of the array if necessary. will take from array in order

- if you want certain elements, skip anything you dont needed
Ex: const [x, , z] = arr; // returns 2 4

- can create variables for nested arrays
Ex: const nested = [2, 3, [4, 5]]
const [x, y, z] = nested // returns 2 3 [4, 5]
const [x, y, [a, b]] = nested // returns 2 3 4 5

- you can set default values to variables you are making via Destructuring
Ex: const [k = 1, l = 1, m = 1] = [8, 9];
console.log(k, l, m); //returns 8 9 1
- helpful for when you arent sure the length of the array 

Destructuring Objects
- way of turning objects into variables
- order doesnt matter when destructuring objects
Ex: const example = {
  ricky: 'aguayo',
  bibi: 'aguayo',
  monica: 'grotjan',
  puppies: {
    first: 'tommy',
    second: 'fiona',
    third: 'oliver',
  }
}
const {ricky, bibi, monica} = example;
- returns key as variable name and value as variable value

- can rename variables
Ex: const {ricky: middle, bibi: youngest, monica: oldest} = example
- returns same values with new variable names

- sets default values like arrays
Ex: {scott = [], monica: buttergut = []} = example
- returns [] 'grotjan'

- can bring out nested objects
const {puppies: {first} } = example
- returns 'tommy'